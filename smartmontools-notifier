#!/bin/bash

# Determine my current dir (src: https://stackoverflow.com/a/246128/13519872).
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Load config.
. $DIR/smartmontools-notifier.cfg

echo "DIR: $DIR | PWD: $(pwd) | 1: $1 | args: $@"

#Debug
mkdir -pv $DIR/debug_logs
logfile=$DIR/debug_logs/$(date +"%Y-%m-%dT%H_%m_%s").log
cp -vn $1 $logfile
chown -v $chown_user $logfile

# Function used to ensure variables get set. Avoids issues with script exiting in -e mode.
eval_expr() {
    # Attempt to eval expression.
    expr=$1
    if [ -z ${expr+x} ]; then
        # If valid, return the evaluated result.
        return $expr
    else
        # If not successful return a default string.
        if [ -z ${2+x} ]; then
            return "<Unknown $2>"
        else
            return "<Unknown>"
        fi
    fi
}

error=$(cat $1)
argFile=$1
#echo "$error"
#text=${error}

#retv=$(curl --silent -G --data-urlencode "chat_id=${chatid}" --data-urlencode "text=$(hostname) smartd @ $(date)" https://api.telegram.org/bot${apikey}/sendMessage 2>&1 /dev/null)

# Relevant parts
host=$(cat $1 | grep 'host name:' | cut -d ':' -f 2-99 | tr -d ' ')
if [[ -z ${host+x} ]] || [[ $host == "" ]]; then host="<Unknown Host ($(hostname))>"; fi

msg_full=$(echo $error | grep 'The following warning/error was logged by the smartd daemon:' -A 2 | tail -n1)
# Store the original error message in its entirety.
error_msg_full=$(cat $1 | grep 'The following warning/error was logged by the smartd daemon:' -A 2 | grep -v 'The following warning/error was logged by the smartd daemon:' | tr -d '\n')
if [[ -z ${error_msg_full+x} ]] || [[ $error_msg_full == "" ]]; then error_msg_full="<Unknown error_msg_full>"; fi
# Strip redundant info from the error message.
error_msg=$(echo "$error_msg_full" | sed 's/^Device\:.*,\s*//')

device_info=$(cat $1 | grep -A 1 'Device info:' | grep -v 'Device info:')
device_id=$(echo $device_info | cut -d ',' -f 1)
device_sn=$(echo $device_info | cut -d ',' -f 2 | cut -d ':' -f 2-99)
device_fqdn=$(echo "${device_id}_${device_sn}")
device_size=$(echo $device_info | rev | cut -d ',' -f 1 | rev | cut -d ' ' -f 2-99)


# Figure out the sdX.
echo "debug: ${device_sn+x}"
echo "debug2: $(readlink -f /dev/disk/by-id/*$device_sn* | head -n1)"
if [[ -z ${device_sn+x} ]]; then
    device_sdx="<Unknown sdX>"
else
    device_sdx=$(readlink -f /dev/disk/by-id/*$device_sn* | head -n1)
fi

#text=$(echo -e "$host smartd: $device_sdx ($device_fqdn):\n\n$error_msg_full")
text=$(echo -e "$host [$device_sdx]: $error_msg")

retv=$(curl --silent -G --data-urlencode "chat_id=${chatid}" --data-urlencode "text=${text}" https://api.telegram.org/bot${apikey}/sendMessage 2>&1 /dev/null)

if [ $debug ]; then
    echo "host: $host"
    echo "msg_full: $msg_full"
    echo "error_msg_full: $error_msg_full"
    echo "device_info: $device_info"
    echo "device_id: $device_id"
    echo "device_sn: $device_sn"
    echo "device_fqdn $device_fqdn"
    echo "device_size: $device_size"
    echo "device_sdx: $device_sdx"
fi
